export default {
  "title":"\"Smart\" tooltip",
  "slug":"hoverintent",
  "githubPath":"/1-js/02-b/1-b1/2-hoverintent",
  "weight":2,
  "libs":[

  ],
  "importance":5,
  "content":"\n\nWrite a function that shows a tooltip over an element only if the visitor moves the mouse *to it*, but not *through it*.\n\nIn other words, if the visitor moves the mouse to the element and stops there -- show the tooltip. And if they just moved the mouse through, then no need, who wants extra blinking?\n\nTechnically, we can measure the mouse speed over the element, and if it's slow then we assume that it comes \"over the element\" and show the tooltip, if it's fast -- then we ignore it.\n\nMake a universal object `new HoverIntent(options)` for it.\n\nIts `options`:\n- `elem` -- element to track.\n- `over` -- a function to call if the mouse came to the element: that is, it moves slowly or stopped over it.\n- `out` -- a function to call when the mouse leaves the element (if `over` was called).\n\nAn example of using such object for the tooltip:\n\n```js\n// a sample tooltip\nlet tooltip = document.createElement('div');\ntooltip.className = \"tooltip\";\ntooltip.innerHTML = \"Tooltip\";\n\n// the object will track mouse and call over/out\nnew HoverIntent({\n  elem,\n  over() {\n    tooltip.style.left = elem.getBoundingClientRect().left + 'px';\n    tooltip.style.top = elem.getBoundingClientRect().bottom + 5 + 'px';\n    document.body.append(tooltip);\n  },\n  out() {\n    tooltip.remove();\n  }\n});\n```\n\nThe demo:\n\n[iframe src=\"solution\" height=140]\n\nIf you move the mouse over the \"clock\" fast then nothing happens, and if you do it slow or stop on them, then there will be a tooltip.\n\nPlease note: the tooltip doesn't \"blink\" when the cursor moves between the clock subelements.",
  "solution":{
    "/hoverIntent.js":"class HoverIntent {\n\n  constructor({\n    sensitivity = 0.1, // speed less than 0.1px/ms means \"hovering over an element\"\n    interval = 100,    // measure mouse speed once per 100ms\n    elem,\n    over,\n    out\n  }) {\n    this.sensitivity = sensitivity;\n    this.interval = interval;\n    this.elem = elem;\n    this.over = over;\n    this.out = out;\n\n    // make sure \"this\" is the object in event handlers.\n    this.onMouseMove = this.onMouseMove.bind(this);\n    this.onMouseOver = this.onMouseOver.bind(this);\n    this.onMouseOut = this.onMouseOut.bind(this);\n\n    // and in time-measuring function (called from setInterval)\n    this.trackSpeed = this.trackSpeed.bind(this);\n\n    elem.addEventListener(\"mouseover\", this.onMouseOver);\n\n    elem.addEventListener(\"mouseout\", this.onMouseOut);\n\n  }\n\n  onMouseOver(event) {\n\n    if (this.isOverElement) {\n      // if we're over the element, then ignore the event\n      // we are already measuring the speed\n      return;\n    }\n\n    this.isOverElement = true;\n\n    // after every mousemove we'll be check the distance\n    // between the previous and the current mouse coordinates\n    // if it's less than sensivity, then the speed is slow\n\n    this.prevX = event.pageX;\n    this.prevY = event.pageY;\n    this.prevTime = Date.now();\n\n    elem.addEventListener('mousemove', this.onMouseMove);\n    this.checkSpeedInterval = setInterval(this.trackSpeed, this.interval);\n  }\n\n  onMouseOut(event) {\n    // if left the element\n    if (!event.relatedTarget || !elem.contains(event.relatedTarget)) {\n      this.isOverElement = false;\n      this.elem.removeEventListener('mousemove', this.onMouseMove);\n      clearInterval(this.checkSpeedInterval);\n      if (this.isHover) {\n        // if there was a stop over the element\n        this.out.call(this.elem, event);\n        this.isHover = false;\n      }\n    }\n  }\n\n  onMouseMove(event) {\n    this.lastX = event.pageX;\n    this.lastY = event.pageY;\n    this.lastTime = Date.now();\n  }\n\n  trackSpeed() {\n\n    let speed;\n\n    if (!this.lastTime || this.lastTime == this.prevTime) {\n      // cursor didn't move\n      speed = 0;\n    } else {\n      speed = Math.sqrt(\n        Math.pow(this.prevX - this.lastX, 2) +\n        Math.pow(this.prevY - this.lastY, 2)\n      ) / (this.lastTime - this.prevTime);\n    }\n\n    if (speed < this.sensitivity) {\n      clearInterval(this.checkSpeedInterval);\n      this.isHover = true;\n      this.over.call(this.elem, event);\n    } else {\n      // speed fast, remember new coordinates as the previous ones\n      this.prevX = this.lastX;\n      this.prevY = this.lastY;\n      this.prevTime = this.lastTime;\n    }\n  }\n\n  destroy() {\n    elem.removeEventListener('mousemove', this.onMouseMove);\n    elem.removeEventListener('mouseover', this.onMouseOver);\n    elem.removeEventListener('mouseout', this.onMouseOut);\n  }\n\n}\n"
  },
  "parent":"b1",
  "type":"html",
  "version":2,
  "source":{
    "/hoverIntent.js":"// Here's a brief sketch of the class\n// with things that you'll need anyway\nclass HoverIntent {\n\n  constructor({\n    sensitivity = 0.1, // speed less than 0.1px/ms means \"hovering over an element\"\n    interval = 100, // measure mouse speed once per 100ms: calculate the distance between previous and next points\n    elem,\n    over,\n    out\n  }) {\n    this.sensitivity = sensitivity;\n    this.interval = interval;\n    this.elem = elem;\n    this.over = over;\n    this.out = out;\n\n    // make sure \"this\" is the object in event handlers.\n    this.onMouseMove = this.onMouseMove.bind(this);\n    this.onMouseOver = this.onMouseOver.bind(this);\n    this.onMouseOut = this.onMouseOut.bind(this);\n\n    // assign the handlers\n    elem.addEventListener(\"mouseover\", this.onMouseOver);\n    elem.addEventListener(\"mouseout\", this.onMouseOut);\n\n    // continue from this point\n\n    console.error('HoverIntentRiba');\n  }\n\n  onMouseOver(event) {\n    console.error(console.log);\n\n    console.log(\"OVER\", event);\n    /* ... */\n  }\n\n  onMouseOut(event) {\n    /* ... */\n  }\n\n  onMouseMove(event) {\n    /* ... */\n  }\n\n\n  destroy() {\n    /* your code to \"disable\" the functionality, remove all handlers */\n    /* it's needed for the tests to work */\n  }\n\n}\n",
    "/index.html":"<link rel=\"stylesheet\" href=\"style.css\">\n<script src=\"hoverIntent.js\"></script>\n\n<div id=\"elem\" class=\"clock\">\n  <span class=\"hours\">12</span> :\n  <span class=\"minutes\">30</span> :\n  <span class=\"seconds\">00</span>\n</div>\n\n<div id=\"tooltip\" hidden>Tooltip</div>\n\n<script>\n  new HoverIntent({\n    elem,\n    over() {\n      tooltip.style.left = elem.getBoundingClientRect().left + 5 + 'px';\n      tooltip.style.top = elem.getBoundingClientRect().bottom + 5 + 'px';\n      tooltip.hidden = false;\n    },\n    out() {\n      tooltip.hidden = true;\n    }\n  });\n</script>",
    "/style.css":".hours {\n  color: red;\n}\n\nbody {\n  margin: 0;\n}\n\n.minutes {\n  color: green;\n}\n\n.seconds {\n  color: blue;\n}\n\n.clock {\n  border: 1px dashed black;\n  padding: 5px;\n  display: inline-block;\n  background: yellow;\n  position: absolute;\n  left: 0;\n  top: 0;\n}\n\n#tooltip {\n  position: absolute;\n  padding: 10px 20px;\n  border: 1px solid #b3c9ce;\n  border-radius: 4px;\n  text-align: center;\n  font: italic 14px/1.3 sans-serif;\n  color: #333;\n  background: #fff;\n  z-index: 100000;\n  box-shadow: 3px 3px 3px rgba(0, 0, 0, .3);\n}\n",
    "/test.js":"describe(\"hoverIntent\", function() {\n\n  function mouse(eventType, x, y, options) {\n    let eventOptions = Object.assign({\n      bubbles: true,\n      clientX: x,\n      clientY: y,\n      pageX: x,\n      pageY: y,\n      target: elem\n    }, options || {});\n\n    elem.dispatchEvent(new MouseEvent(eventType, eventOptions));\n  }\n\n\n  let isOver;\n  let hoverIntent;\n\n\n  before(function() {\n    this.clock = sinon.useFakeTimers();\n  });\n\n  after(function() {\n    this.clock.restore();\n  });\n\n\n  beforeEach(function() {\n    isOver = false;\n\n    hoverIntent = new HoverIntent({\n      elem: elem,\n      over: function() {\n        isOver = true;\n      },\n      out: function() {\n        isOver = false;\n      }\n    });\n  })\n\n  afterEach(function() {\n    if (hoverIntent) {\n      hoverIntent.destroy();\n    }\n  })\n\n  it(\"mouseover -> when the pointer just arrived, no tooltip\", function() {\n    mouse('mouseover', 10, 10);\n    assert.isFalse(isOver);\n  });\n\n  it(\"mouseover -> after a delay, the tooltip shows up\", function() {\n    mouse('mouseover', 10, 10);\n    this.clock.tick(100);\n    assert.isTrue(isOver);\n  });\n\n  it(\"mouseover -> followed by fast mouseout leads doesn't show tooltip\", function() {\n    mouse('mouseover', 10, 10);\n    setTimeout(\n      () => mouse('mouseout', 300, 300, { relatedTarget: document.body}),\n      30\n    );\n    this.clock.tick(100);\n    assert.isFalse(isOver);\n  });\n\n\n  it(\"mouseover -> slow move -> tooltips\", function() {\n    mouse('mouseover', 10, 10);\n    for(let i=10; i<200; i+= 10) {\n      setTimeout(\n        () => mouse('mousemove', i/5, 10),\n        i\n      );\n    }\n    this.clock.tick(200);\n    assert.isTrue(isOver);\n  });\n\n  it(\"mouseover -> fast move -> no tooltip\", function() {\n    mouse('mouseover', 10, 10);\n    for(let i=10; i<200; i+= 10) {\n      setTimeout(\n        () => mouse('mousemove', i, 10),\n        i\n      );\n    }\n    this.clock.tick(200);\n    assert.isFalse(isOver);\n  });\n\n});\n"
  }
};
